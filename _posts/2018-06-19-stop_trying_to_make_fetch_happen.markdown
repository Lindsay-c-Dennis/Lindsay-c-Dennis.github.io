---
layout: post
title:      "Stop trying to make Fetch happen!"
date:       2018-06-19 22:50:08 +0000
permalink:  stop_trying_to_make_fetch_happen
---


This is it! The big one! I’ve finally put together a functional React/Redux app with a Rails API backend. Of all the projects I’ve worked on so far, this has definitely been the most daunting. While the React framework has a lot going for it, and is capable of creating beautiful, FAST web pages, it took me quite some time to wrap my head around how all the different pieces come together with the redux pattern to create a coherent whole.

For my project, I decided to create a promotional page for my sister, a Portland, Oregon-based musician who performs under the stage name Dr. Something. The page has routes for music, videos, Sounds Illustrated (her series of sketches she does of other local musicians), and a review board where visitors can leave short notes. The first three routes were relatively simple, involving a fetch call to the API to get a list of resources that were rendered to the page through presentational components that were children of container components. Despite the straightforwardness of the task, I still got hung up in a few places. The fetch API is designed to be a much cleaner alternative to the old-school xml request, but understanding the syntax and how promises work took a bit of extra brain power. I also got stuck for quite a while trying to figure out why my components were not rendering properly, only to discover that a small inconsistency in my reducer was the culprit (I was returning an array in one case and objects in the others). 

The hardest part overall was figuring out the review board. I set up a review board page, which rendered each review using a review card component. Initially, I set up the review card component to be a presentational component, passing in the review content and delete method as props. However, when it came time to set up the update action, things got a little bit more complicated. After some google research, I decided the best way to approach the problem would be to include a toggleEdit function that would allow me to switch a component’s state from not editing to editing. Since this would require state, I knew that I would have to transform my component into a container, or ‘smart’ component. With a bit of trial and error, I managed to set up the page to render the form when the edit button is clicked, and to send a successful patch request to the API to modify its content. However, that content was not effectively re-rendering on the screen. If I refreshed the page, the edited review appeared, but it wasn’t automatically rendering. Eventually, I traced the flow of information into a lifecycle event (componentWillReceiveProps) and determined that the conditional statement to determine if an update was necessary was not effectively catching the edits I was making. After revising that function, I finally had the functionality I wanted, and I was able to wrap up the project.

Working through this project has helped me learn a tremendous amount about the react-redux flow and how to debug successfully to see exactly what is being passed from where. I know I still have a lot to learn, but I’m proud of my ability to work through problems and learn through the magic of google. Now, I’m on to the assessment, and hopefully graduation soon!

